/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Oauth2TokenPost200Response } from '../models';
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiates the OAuth2 authorization flow
         * @summary OAuth2 Authorization Endpoint
         * @param {string} responseType 
         * @param {string} clientId 
         * @param {string} redirectUri 
         * @param {string} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeGet: async (responseType: string, clientId: string, redirectUri: string, scope: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'responseType' is not null or undefined
            assertParamExists('oauth2AuthorizeGet', 'responseType', responseType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('oauth2AuthorizeGet', 'clientId', clientId)
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('oauth2AuthorizeGet', 'redirectUri', redirectUri)
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('oauth2AuthorizeGet', 'scope', scope)
            const localVarPath = `/oauth2/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication x-signature required

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends consent approval
         * @summary OAuth2 Consent Endpoint
         * @param {string} [clientId] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizePost: async (clientId?: string, state?: string, scope?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth2/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication x-signature required


            if (clientId !== undefined) { 
                localVarFormParams.append('client_id', clientId as any);
            }
    
            if (state !== undefined) { 
                localVarFormParams.append('state', state as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.append('scope', scope as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exchange authorization code for access token
         * @summary OAuth2 Token Endpoint
         * @param {string} [grantType] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenPost: async (grantType?: string, code?: string, redirectUri?: string, clientId?: string, clientSecret?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (code !== undefined) { 
                localVarFormParams.set('code', code as any);
            }
    
            if (redirectUri !== undefined) { 
                localVarFormParams.set('redirect_uri', redirectUri as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * Initiates the OAuth2 authorization flow
         * @summary OAuth2 Authorization Endpoint
         * @param {string} responseType 
         * @param {string} clientId 
         * @param {string} redirectUri 
         * @param {string} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2AuthorizeGet(responseType: string, clientId: string, redirectUri: string, scope: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.oauth2AuthorizeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends consent approval
         * @summary OAuth2 Consent Endpoint
         * @param {string} [clientId] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2AuthorizePost(clientId?: string, state?: string, scope?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2AuthorizePost(clientId, state, scope, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.oauth2AuthorizePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exchange authorization code for access token
         * @summary OAuth2 Token Endpoint
         * @param {string} [grantType] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauth2TokenPost(grantType?: string, code?: string, redirectUri?: string, clientId?: string, clientSecret?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Oauth2TokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauth2TokenPost(grantType, code, redirectUri, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.oauth2TokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * Initiates the OAuth2 authorization flow
         * @summary OAuth2 Authorization Endpoint
         * @param {string} responseType 
         * @param {string} clientId 
         * @param {string} redirectUri 
         * @param {string} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeGet(responseType: string, clientId: string, redirectUri: string, scope: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends consent approval
         * @summary OAuth2 Consent Endpoint
         * @param {string} [clientId] 
         * @param {string} [state] 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizePost(clientId?: string, state?: string, scope?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.oauth2AuthorizePost(clientId, state, scope, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange authorization code for access token
         * @summary OAuth2 Token Endpoint
         * @param {string} [grantType] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenPost(grantType?: string, code?: string, redirectUri?: string, clientId?: string, clientSecret?: string, options?: RawAxiosRequestConfig): AxiosPromise<Oauth2TokenPost200Response> {
            return localVarFp.oauth2TokenPost(grantType, code, redirectUri, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * Initiates the OAuth2 authorization flow
     * @summary OAuth2 Authorization Endpoint
     * @param {string} responseType 
     * @param {string} clientId 
     * @param {string} redirectUri 
     * @param {string} scope 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public oauth2AuthorizeGet(responseType: string, clientId: string, redirectUri: string, scope: string, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends consent approval
     * @summary OAuth2 Consent Endpoint
     * @param {string} [clientId] 
     * @param {string} [state] 
     * @param {string} [scope] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public oauth2AuthorizePost(clientId?: string, state?: string, scope?: string, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).oauth2AuthorizePost(clientId, state, scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exchange authorization code for access token
     * @summary OAuth2 Token Endpoint
     * @param {string} [grantType] 
     * @param {string} [code] 
     * @param {string} [redirectUri] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public oauth2TokenPost(grantType?: string, code?: string, redirectUri?: string, clientId?: string, clientSecret?: string, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).oauth2TokenPost(grantType, code, redirectUri, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}

