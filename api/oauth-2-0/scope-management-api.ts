/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../../base';
// @ts-ignore
import type { ErrorResponse } from '../../models';
// @ts-ignore
import type { ScopeResponse } from '../../models';
/**
 * OAuth20ScopeManagementApi - axios parameter creator
 * @export
 */
export const OAuth20ScopeManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of all available OAuth2 scopes for the specified tenant. The scopes define the permissions that can be requested by OAuth2 clients. The list is ordered alphabetically, with the \'openid\' scope always appearing first.
         * @summary Get available OAuth2 scopes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/2.0/scopes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication asc_auth_key required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuth20ScopeManagementApi - functional programming interface
 * @export
 */
export const OAuth20ScopeManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuth20ScopeManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of all available OAuth2 scopes for the specified tenant. The scopes define the permissions that can be requested by OAuth2 clients. The list is ordered alphabetically, with the \'openid\' scope always appearing first.
         * @summary Get available OAuth2 scopes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScopes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScopeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScopes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OAuth20ScopeManagementApi.getScopes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OAuth20ScopeManagementApi - factory interface
 * @export
 */
export const OAuth20ScopeManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuth20ScopeManagementApiFp(configuration)
    return {
        /**
         * Retrieves a list of all available OAuth2 scopes for the specified tenant. The scopes define the permissions that can be requested by OAuth2 clients. The list is ordered alphabetically, with the \'openid\' scope always appearing first.
         * @summary Get available OAuth2 scopes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes(options?: RawAxiosRequestConfig): AxiosPromise<ScopeResponse> {
            return localVarFp.getScopes(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuth20ScopeManagementApi - object-oriented interface
 * @export
 * @class OAuth20ScopeManagementApi
 * @extends {BaseAPI}
 */
export class OAuth20ScopeManagementApi extends BaseAPI {
    /**
     * Retrieves a list of all available OAuth2 scopes for the specified tenant. The scopes define the permissions that can be requested by OAuth2 clients. The list is ordered alphabetically, with the \'openid\' scope always appearing first.
     * @summary Get available OAuth2 scopes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth20ScopeManagementApi
     */
    public getScopes(options?: RawAxiosRequestConfig) {
        return OAuth20ScopeManagementApiFp(this.configuration).getScopes(options).then((request) => request(this.axios, this.basePath));
    }
}

